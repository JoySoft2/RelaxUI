<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:theme="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2"
                    xmlns:local="clr-namespace:RelaxUI">

    <SolidColorBrush x:Key="ecset.temaszin"                     Color="{Binding Source={x:Static local:Temak.Egyke}, Path=AktivTema.TemaSzin                    , Mode=OneWay}"/>
    <SolidColorBrush x:Key="ecset.statuszalap"                  Color="{Binding Source={x:Static local:Temak.Egyke}, Path=AktivTema.StatuszAlapSzin             , Mode=OneWay}"/>
    <SolidColorBrush x:Key="ecset.statuszok"                    Color="{Binding Source={x:Static local:Temak.Egyke}, Path=AktivTema.StatuszOkSzin               , Mode=OneWay}"/>
    <SolidColorBrush x:Key="ecset.statuszinformacio"            Color="{Binding Source={x:Static local:Temak.Egyke}, Path=AktivTema.StatuszInformacioSzin       , Mode=OneWay}"/>
    <SolidColorBrush x:Key="ecset.statuszfigyelmeztetes"        Color="{Binding Source={x:Static local:Temak.Egyke}, Path=AktivTema.StatuszFigyelmeztetesSzin   , Mode=OneWay}"/>
    <SolidColorBrush x:Key="ecset.statuszhiba"                  Color="{Binding Source={x:Static local:Temak.Egyke}, Path=AktivTema.StatuszHibaSzin             , Mode=OneWay}"/>
    <SolidColorBrush x:Key="ecset.ablakhatterszin"              Color="{Binding Source={x:Static local:Temak.Egyke}, Path=AktivTema.AblakHatterSzin             , Mode=OneWay}"/>
    <SolidColorBrush x:Key="ecset.panelszin"                    Color="{Binding Source={x:Static local:Temak.Egyke}, Path=AktivTema.PanelSzin                   , Mode=OneWay}"/>
    <SolidColorBrush x:Key="ecset.szovegszin"                   Color="{Binding Source={x:Static local:Temak.Egyke}, Path=AktivTema.SzovegSzin                  , Mode=OneWay}"/>
    <SolidColorBrush x:Key="ecset.szovegletiltottszin"          Color="{Binding Source={x:Static local:Temak.Egyke}, Path=AktivTema.SzovegLetiltottSzin         , Mode=OneWay}"/>
    <SolidColorBrush x:Key="ecset.vezerlohatterszin"            Color="{Binding Source={x:Static local:Temak.Egyke}, Path=AktivTema.VezerloHatterSzin           , Mode=OneWay}"/>
    <SolidColorBrush x:Key="ecset.vezerlokeretszin"             Color="{Binding Source={x:Static local:Temak.Egyke}, Path=AktivTema.VezerloKeretSzin            , Mode=OneWay}"/>
    <SolidColorBrush x:Key="ecset.vezerlohatteregerfeletteszin" Color="{Binding Source={x:Static local:Temak.Egyke}, Path=AktivTema.VezerloHatterEgerFeletteSzin, Mode=OneWay}"/>
    <SolidColorBrush x:Key="ecset.vezerlokeretegerfeletteszin"  Color="{Binding Source={x:Static local:Temak.Egyke}, Path=AktivTema.VezerloKeretEgerFeletteSzin , Mode=OneWay}"/>
    <SolidColorBrush x:Key="ecset.vezerlohatterakcioszin"       Color="{Binding Source={x:Static local:Temak.Egyke}, Path=AktivTema.VezerloHatterAkcioSzin      , Mode=OneWay}"/>
    <SolidColorBrush x:Key="ecset.vezerlokeretakcioszin"        Color="{Binding Source={x:Static local:Temak.Egyke}, Path=AktivTema.VezerloKeretAkcioSzin       , Mode=OneWay}"/>
    <SolidColorBrush x:Key="ecset.vezerlohatterfokuszszin"      Color="{Binding Source={x:Static local:Temak.Egyke}, Path=AktivTema.VezerloHatterFokuszSzin     , Mode=OneWay}"/>
    <SolidColorBrush x:Key="ecset.vezerlokeretfokuszszin"       Color="{Binding Source={x:Static local:Temak.Egyke}, Path=AktivTema.VezerloKeretFokuszSzin      , Mode=OneWay}"/>
    <SolidColorBrush x:Key="ecset.vezerlohatterletiltottszin"   Color="{Binding Source={x:Static local:Temak.Egyke}, Path=AktivTema.VezerloHatterLetiltottSzin  , Mode=OneWay}"/>
    <SolidColorBrush x:Key="ecset.vezerlokeretletiltottszin"    Color="{Binding Source={x:Static local:Temak.Egyke}, Path=AktivTema.VezerloKeretLetiltottSzin   , Mode=OneWay}"/>

    <!-- ****************************************************************************************************************************************************************************************** -->

    <!-- TextBlock ******************************************************************************************************************************************************************************** -->
    <Style TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{DynamicResource ecset.temaszin}"/>
    </Style>

    <!-- TextBox ********************************************************************************************************************************************************************************** -->
    <Style TargetType="{x:Type TextBox}">
        <Setter Property="Height" Value="24"/>
        <Setter Property="BorderThickness" Value="1,0,0,1"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="4,0"/>
        <Setter Property="Foreground" Value="{DynamicResource ecset.temaszin}"/>
    </Style>

    <!-- SzovegDoboz ****************************************************************************************************************************************************************************** -->
    <Style TargetType="{x:Type local:SzovegDoboz}">
        <Setter Property="Height" Value="24"/>
        <Setter Property="BorderThickness" Value="1,0,0,1"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="4,0"/>
        <Setter Property="Foreground" Value="{DynamicResource ecset.temaszin}"/>
    </Style>

    <!-- PasswordBox ****************************************************************************************************************************************************************************** -->
    <Style TargetType="{x:Type PasswordBox}">
        <Setter Property="Height" Value="24"/>
        <Setter Property="BorderThickness" Value="1,0,0,1"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="4,0"/>
        <Setter Property="Foreground" Value="{DynamicResource ecset.temaszin}"/>
    </Style>

    <!-- Button *********************************************************************************************************************************************************************************** -->
    <Style TargetType="{x:Type Button}">
        <Setter Property="Height" Value="24"/>
        <Setter Property="BorderThickness" Value="0"/>
        <!--<Setter Property="Background" Value="Transparent"/>-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefault" Value="true">
                            <Setter Property="Background" TargetName="border" Value="#FFCCEECC"/>
                        </Trigger>
                        <Trigger Property="IsCancel" Value="true">
                            <Setter Property="Background" TargetName="border" Value="#FFEECCCC"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="#FFDDDDFF"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="#FFCCCCFF"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsDefault" Value="true"/>
                                <Condition Property="IsMouseOver" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="border" Value="#FFBBFFBB"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsCancel" Value="true"/>
                                <Condition Property="IsMouseOver" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="border" Value="#FFFFBBBB"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsDefault" Value="true"/>
                                <Condition Property="IsPressed" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="border" Value="#FFAAEEAA"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsCancel" Value="true"/>
                                <Condition Property="IsPressed" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="border" Value="#FFEEAAAA"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0.5" Duration="0:0:0.4"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity" To="1.0" Duration="0:0:0.4"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- GombIkonos ******************************************************************************************************************************************************************************* -->
    <Style TargetType="{x:Type local:GombIkonos}">
        <Setter Property="Height" Value="24"/>
        <Setter Property="BorderThickness" Value="0"/>
        <!--<Setter Property="Background" Value="Transparent"/>-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:GombIkonos}">
                    <Border x:Name="border" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefault" Value="true">
                            <Setter Property="Background" TargetName="border" Value="#FFCCEECC"/>
                        </Trigger>
                        <Trigger Property="IsCancel" Value="true">
                            <Setter Property="Background" TargetName="border" Value="#FFEECCCC"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="#FFDDDDFF"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="#FFCCCCFF"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsDefault" Value="true"/>
                                <Condition Property="IsMouseOver" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="border" Value="#FFBBFFBB"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsCancel" Value="true"/>
                                <Condition Property="IsMouseOver" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="border" Value="#FFFFBBBB"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsDefault" Value="true"/>
                                <Condition Property="IsPressed" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="border" Value="#FFAAEEAA"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsCancel" Value="true"/>
                                <Condition Property="IsPressed" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="border" Value="#FFEEAAAA"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0.5" Duration="0:0:0.4"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity" To="1.0" Duration="0:0:0.4"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- ToggleButton ***************************************************************************************************************************************************************************** -->
    <Style TargetType="{x:Type ToggleButton}">
        <Setter Property="Height" Value="24"/>
        <Setter Property="BorderThickness" Value="0"/>
        <!--<Setter Property="Background" Value="Transparent"/>-->
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0.5" Duration="0:0:0.4"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity" To="1.0" Duration="0:0:0.4"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- ProgressBar ****************************************************************************************************************************************************************************** -->
    <Style TargetType="{x:Type ProgressBar}">
        <Setter Property="Height" Value="12"/>
        <Setter Property="Foreground" Value="{DynamicResource ecset.temaszin}"/>
    </Style>

    <!-- Menu ************************************************************************************************************************************************************************************* -->
    <Style TargetType="{x:Type Menu}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
    </Style>

    <!-- DatePicker ******************************************************************************************************************************************************************************* -->
    <Style TargetType="{x:Type DatePicker}">
        <Setter Property="Height" Value="24"/>
        <Setter Property="BorderThickness" Value="1,0,0,1"/>
    </Style>

    <Style TargetType="{x:Type DatePickerTextBox}">
        <Setter Property="Text" Value="Határozatlan dátum"/>
    </Style>

    <!-- HeaderedContentControl ******************************************************************************************************************************************************************* -->
    <Style TargetType="{x:Type HeaderedContentControl}">
        <Setter Property="Focusable" Value="False"/>
    </Style>

    <Style TargetType="{x:Type GridViewColumnHeader}">
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{Binding}" Margin="5,0"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>